---
layout: post
title:  "Cache"
date:   2024-11-07 23:25:14 -0700
categories: leetcode
---

# 緩存模式思維導圖總結與實例

## Cache-Aside（旁路緩存）
- **概述**：應用程序先從緩存讀取數據，如無數據則從數據庫獲取並加載到緩存中。
- **實例**：用於商品目錄系統，當用戶首次查看商品詳情時，數據會從數據庫加載並緩存，隨後其他用戶的訪問可直接從緩存中獲取。
- **優點**：
  - 減少數據庫的讀取負載。
  - 控制數據更新，根據需要進行緩存更新。
- **缺點**：
  - 如果數據頻繁變動，緩存中的數據可能會過時。
  - 增加了應用層處理邏輯。

## Read-Through（讀穿緩存）
- **概述**：應用程序直接從緩存請求數據，若無數據則由緩存自動從數據庫加載並緩存。
- **實例**：常見於用戶資料系統，如當用戶登錄查詢個人資料時，數據可自動加載至緩存以減少對數據庫的讀取。
- **優點**：
  - 簡化應用邏輯，讀取邏輯由緩存處理。
  - 避免多次從數據庫拉取相同數據，提升效率。
- **缺點**：
  - 缺乏應用層的控制權，緩存更新策略固定。
  - 適合於讀取頻繁但變更不頻繁的數據，否則緩存數據可能不一致。

## Write-Through（寫穿緩存）
- **概述**：數據寫入緩存的同時同步寫入數據庫，確保兩者數據一致。
- **實例**：用於金融交易系統，當每次有新交易時會即時更新緩存和數據庫，以確保交易記錄的即時性。
- **優點**：
  - 保證數據的即時一致性，適合需要高一致性的系統。
  - 減少應用層複雜度，寫入過程由緩存和數據庫共同管理。
- **缺點**：
  - 會增加寫操作的延遲，因為每次都需要寫入數據庫。
  - 如果寫入頻繁，可能會影響系統性能。

## Write-Behind（寫回緩存）
- **概述**：數據寫入緩存，但會延遲或批量地寫入數據庫，主要為了提升性能。
- **實例**：社交媒體的點贊或評論系統，點贊數據可以先存入緩存，並定期批量寫入數據庫。
- **優點**：
  - 提高寫操作性能，適合高頻率寫入的場景。
  - 減少數據庫壓力，因為批量處理可以減少數據庫的訪問次數。
- **缺點**：
  - 存在數據一致性風險，如在緩存寫回數據庫前系統崩潰，會導致數據丟失。
  - 對於需即時數據同步的場景不適用。

## 模式總覽
- **讀取緩存模式**：
  - Cache-Aside
  - Read-Through
- **寫入緩存模式**：
  - Write-Through
  - Write-Behind

![緩存模式思維導圖](/images/緩存模式思維導圖.png)

